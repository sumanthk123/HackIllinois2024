should = require 'should'
_ = require 'lodash'
logger = require 'torch'
logger.toggleElapsed()

core = require '../lib/core'

mockRetriever = require '../test/helpers/mockRetriever'

core.init {
  timeout: 20
  loggers: [{writer: 'console', level: 'debug'}]
}, mockRetriever()

channel = 'testChannel'

# Given a success response
testResponse = {message: 'this works'}
core.respond channel, (message, next) ->
  next null, testResponse

# And an error response
testError = new Error 'Expect this error'
core.respond channel, (message, next) ->
  next testError, {}

# When I delegate to the channel
core.delegate channel, {}, (err, results) ->

  # Then I should receive an error
  should.exist err
  expectedMsg = "Received errors from channel '#{channel}':\nError: #{testError.message}"
  err.message.should.startWith expectedMsg

  should.exist err.errors, 'expected errors'
  subErrors = _.values err.errors
  should.exist subErrors, 'expected subErrors'
  [subErr] = subErrors
  should.exist subErr, 'expected subErr'
  subErr.should.eql testError

  should.exist results, 'expected results'
  values = _.values results
  should.exist values, 'expected values'
  [result] = values
  should.exist result, 'expected result'
  result.should.eql testResponse

  logger.cyan 'calling done'
  process.exit()
