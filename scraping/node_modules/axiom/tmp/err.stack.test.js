// Generated by CoffeeScript 1.10.0
(function() {
  var _, channel, core, logger, mockRetriever, should, testError, testResponse;

  should = require('should');

  _ = require('lodash');

  logger = require('torch');

  logger.toggleElapsed();

  core = require('../lib/core');

  mockRetriever = require('../test/helpers/mockRetriever');

  core.init({
    timeout: 20,
    loggers: [
      {
        writer: 'console',
        level: 'debug'
      }
    ]
  }, mockRetriever());

  channel = 'testChannel';

  testResponse = {
    message: 'this works'
  };

  core.respond(channel, function(message, next) {
    return next(null, testResponse);
  });

  testError = new Error('Expect this error');

  core.respond(channel, function(message, next) {
    return next(testError, {});
  });

  core.delegate(channel, {}, function(err, results) {
    var expectedMsg, result, subErr, subErrors, values;
    should.exist(err);
    expectedMsg = "Received errors from channel '" + channel + "':\nError: " + testError.message;
    err.message.should.startWith(expectedMsg);
    should.exist(err.errors, 'expected errors');
    subErrors = _.values(err.errors);
    should.exist(subErrors, 'expected subErrors');
    subErr = subErrors[0];
    should.exist(subErr, 'expected subErr');
    subErr.should.eql(testError);
    should.exist(results, 'expected results');
    values = _.values(results);
    should.exist(values, 'expected values');
    result = values[0];
    should.exist(result, 'expected result');
    result.should.eql(testResponse);
    logger.cyan('calling done');
    return process.exit();
  });

}).call(this);
